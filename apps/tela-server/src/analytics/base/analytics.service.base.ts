/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Analytics as PrismaAnalytics } from "@prisma/client";

export class AnalyticsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AnalyticsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.analytics.count(args);
  }

  async analyticsItems(
    args: Prisma.AnalyticsFindManyArgs
  ): Promise<PrismaAnalytics[]> {
    return this.prisma.analytics.findMany(args);
  }
  async analytics(
    args: Prisma.AnalyticsFindUniqueArgs
  ): Promise<PrismaAnalytics | null> {
    return this.prisma.analytics.findUnique(args);
  }
  async createAnalytics(
    args: Prisma.AnalyticsCreateArgs
  ): Promise<PrismaAnalytics> {
    return this.prisma.analytics.create(args);
  }
  async updateAnalytics(
    args: Prisma.AnalyticsUpdateArgs
  ): Promise<PrismaAnalytics> {
    return this.prisma.analytics.update(args);
  }
  async deleteAnalytics(
    args: Prisma.AnalyticsDeleteArgs
  ): Promise<PrismaAnalytics> {
    return this.prisma.analytics.delete(args);
  }
}
