/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CrossBorderPayments } from "./CrossBorderPayments";
import { CrossBorderPaymentsCountArgs } from "./CrossBorderPaymentsCountArgs";
import { CrossBorderPaymentsFindManyArgs } from "./CrossBorderPaymentsFindManyArgs";
import { CrossBorderPaymentsFindUniqueArgs } from "./CrossBorderPaymentsFindUniqueArgs";
import { CreateCrossBorderPaymentsArgs } from "./CreateCrossBorderPaymentsArgs";
import { UpdateCrossBorderPaymentsArgs } from "./UpdateCrossBorderPaymentsArgs";
import { DeleteCrossBorderPaymentsArgs } from "./DeleteCrossBorderPaymentsArgs";
import { CrossBorderPaymentsService } from "../crossBorderPayments.service";
@graphql.Resolver(() => CrossBorderPayments)
export class CrossBorderPaymentsResolverBase {
  constructor(protected readonly service: CrossBorderPaymentsService) {}

  async _crossBorderPaymentsItemsMeta(
    @graphql.Args() args: CrossBorderPaymentsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CrossBorderPayments])
  async crossBorderPaymentsItems(
    @graphql.Args() args: CrossBorderPaymentsFindManyArgs
  ): Promise<CrossBorderPayments[]> {
    return this.service.crossBorderPaymentsItems(args);
  }

  @graphql.Query(() => CrossBorderPayments, { nullable: true })
  async crossBorderPayments(
    @graphql.Args() args: CrossBorderPaymentsFindUniqueArgs
  ): Promise<CrossBorderPayments | null> {
    const result = await this.service.crossBorderPayments(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CrossBorderPayments)
  async createCrossBorderPayments(
    @graphql.Args() args: CreateCrossBorderPaymentsArgs
  ): Promise<CrossBorderPayments> {
    return await this.service.createCrossBorderPayments({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CrossBorderPayments)
  async updateCrossBorderPayments(
    @graphql.Args() args: UpdateCrossBorderPaymentsArgs
  ): Promise<CrossBorderPayments | null> {
    try {
      return await this.service.updateCrossBorderPayments({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CrossBorderPayments)
  async deleteCrossBorderPayments(
    @graphql.Args() args: DeleteCrossBorderPaymentsArgs
  ): Promise<CrossBorderPayments | null> {
    try {
      return await this.service.deleteCrossBorderPayments(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
