/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CrossBorderPaymentsService } from "../crossBorderPayments.service";
import { CrossBorderPaymentsCreateInput } from "./CrossBorderPaymentsCreateInput";
import { CrossBorderPayments } from "./CrossBorderPayments";
import { CrossBorderPaymentsFindManyArgs } from "./CrossBorderPaymentsFindManyArgs";
import { CrossBorderPaymentsWhereUniqueInput } from "./CrossBorderPaymentsWhereUniqueInput";
import { CrossBorderPaymentsUpdateInput } from "./CrossBorderPaymentsUpdateInput";

export class CrossBorderPaymentsControllerBase {
  constructor(protected readonly service: CrossBorderPaymentsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CrossBorderPayments })
  async createCrossBorderPayments(
    @common.Body() data: CrossBorderPaymentsCreateInput
  ): Promise<CrossBorderPayments> {
    return await this.service.createCrossBorderPayments({
      data: data,
      select: {
        conversionRate: true,
        createdAt: true,
        currency: true,
        id: true,
        paymentGateway: true,
        status: true,
        transactionAmount: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CrossBorderPayments] })
  @ApiNestedQuery(CrossBorderPaymentsFindManyArgs)
  async crossBorderPaymentsItems(
    @common.Req() request: Request
  ): Promise<CrossBorderPayments[]> {
    const args = plainToClass(CrossBorderPaymentsFindManyArgs, request.query);
    return this.service.crossBorderPaymentsItems({
      ...args,
      select: {
        conversionRate: true,
        createdAt: true,
        currency: true,
        id: true,
        paymentGateway: true,
        status: true,
        transactionAmount: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CrossBorderPayments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async crossBorderPayments(
    @common.Param() params: CrossBorderPaymentsWhereUniqueInput
  ): Promise<CrossBorderPayments | null> {
    const result = await this.service.crossBorderPayments({
      where: params,
      select: {
        conversionRate: true,
        createdAt: true,
        currency: true,
        id: true,
        paymentGateway: true,
        status: true,
        transactionAmount: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CrossBorderPayments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCrossBorderPayments(
    @common.Param() params: CrossBorderPaymentsWhereUniqueInput,
    @common.Body() data: CrossBorderPaymentsUpdateInput
  ): Promise<CrossBorderPayments | null> {
    try {
      return await this.service.updateCrossBorderPayments({
        where: params,
        data: data,
        select: {
          conversionRate: true,
          createdAt: true,
          currency: true,
          id: true,
          paymentGateway: true,
          status: true,
          transactionAmount: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CrossBorderPayments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCrossBorderPayments(
    @common.Param() params: CrossBorderPaymentsWhereUniqueInput
  ): Promise<CrossBorderPayments | null> {
    try {
      return await this.service.deleteCrossBorderPayments({
        where: params,
        select: {
          conversionRate: true,
          createdAt: true,
          currency: true,
          id: true,
          paymentGateway: true,
          status: true,
          transactionAmount: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
