/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ToolTrackingService } from "../toolTracking.service";
import { ToolTrackingCreateInput } from "./ToolTrackingCreateInput";
import { ToolTracking } from "./ToolTracking";
import { ToolTrackingFindManyArgs } from "./ToolTrackingFindManyArgs";
import { ToolTrackingWhereUniqueInput } from "./ToolTrackingWhereUniqueInput";
import { ToolTrackingUpdateInput } from "./ToolTrackingUpdateInput";

export class ToolTrackingControllerBase {
  constructor(protected readonly service: ToolTrackingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ToolTracking })
  async createToolTracking(
    @common.Body() data: ToolTrackingCreateInput
  ): Promise<ToolTracking> {
    return await this.service.createToolTracking({
      data: data,
      select: {
        createdAt: true,
        employeeId: true,
        id: true,
        storeId: true,
        toolName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ToolTracking] })
  @ApiNestedQuery(ToolTrackingFindManyArgs)
  async toolTrackings(@common.Req() request: Request): Promise<ToolTracking[]> {
    const args = plainToClass(ToolTrackingFindManyArgs, request.query);
    return this.service.toolTrackings({
      ...args,
      select: {
        createdAt: true,
        employeeId: true,
        id: true,
        storeId: true,
        toolName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ToolTracking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async toolTracking(
    @common.Param() params: ToolTrackingWhereUniqueInput
  ): Promise<ToolTracking | null> {
    const result = await this.service.toolTracking({
      where: params,
      select: {
        createdAt: true,
        employeeId: true,
        id: true,
        storeId: true,
        toolName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ToolTracking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateToolTracking(
    @common.Param() params: ToolTrackingWhereUniqueInput,
    @common.Body() data: ToolTrackingUpdateInput
  ): Promise<ToolTracking | null> {
    try {
      return await this.service.updateToolTracking({
        where: params,
        data: data,
        select: {
          createdAt: true,
          employeeId: true,
          id: true,
          storeId: true,
          toolName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ToolTracking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteToolTracking(
    @common.Param() params: ToolTrackingWhereUniqueInput
  ): Promise<ToolTracking | null> {
    try {
      return await this.service.deleteToolTracking({
        where: params,
        select: {
          createdAt: true,
          employeeId: true,
          id: true,
          storeId: true,
          toolName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
