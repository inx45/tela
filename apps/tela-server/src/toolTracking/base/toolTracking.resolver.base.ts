/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ToolTracking } from "./ToolTracking";
import { ToolTrackingCountArgs } from "./ToolTrackingCountArgs";
import { ToolTrackingFindManyArgs } from "./ToolTrackingFindManyArgs";
import { ToolTrackingFindUniqueArgs } from "./ToolTrackingFindUniqueArgs";
import { CreateToolTrackingArgs } from "./CreateToolTrackingArgs";
import { UpdateToolTrackingArgs } from "./UpdateToolTrackingArgs";
import { DeleteToolTrackingArgs } from "./DeleteToolTrackingArgs";
import { ToolTrackingService } from "../toolTracking.service";
@graphql.Resolver(() => ToolTracking)
export class ToolTrackingResolverBase {
  constructor(protected readonly service: ToolTrackingService) {}

  async _toolTrackingsMeta(
    @graphql.Args() args: ToolTrackingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ToolTracking])
  async toolTrackings(
    @graphql.Args() args: ToolTrackingFindManyArgs
  ): Promise<ToolTracking[]> {
    return this.service.toolTrackings(args);
  }

  @graphql.Query(() => ToolTracking, { nullable: true })
  async toolTracking(
    @graphql.Args() args: ToolTrackingFindUniqueArgs
  ): Promise<ToolTracking | null> {
    const result = await this.service.toolTracking(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ToolTracking)
  async createToolTracking(
    @graphql.Args() args: CreateToolTrackingArgs
  ): Promise<ToolTracking> {
    return await this.service.createToolTracking({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ToolTracking)
  async updateToolTracking(
    @graphql.Args() args: UpdateToolTrackingArgs
  ): Promise<ToolTracking | null> {
    try {
      return await this.service.updateToolTracking({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ToolTracking)
  async deleteToolTracking(
    @graphql.Args() args: DeleteToolTrackingArgs
  ): Promise<ToolTracking | null> {
    try {
      return await this.service.deleteToolTracking(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
